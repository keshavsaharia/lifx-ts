import dgram from 'dgram'

import {
	Packet,
	LifxDevice,
	Response,
	DeviceDiscover
} from '.'

import {
	LifxNetworkInterface,
	Transmission,
	LifxDeviceHandler,
	DeviceGroup
} from './interface'

import {
	getIPv4Interfaces,
	broadcast,
	unicast,
	createSocket
} from './network'

import {
	LIFX_PORT,
	DEFAULT_TIMEOUT
} from './constant'

import {
	DeviceTimeoutError,
	DeviceRequestError
} from './error'

/**
 * @class 	LifxClient
 * @desc 	LAN client for communicating with LIFX smart bulbs and devices over the local network,
 * 			without needing to talk to any external servers.
 */
export default class LifxClient {
	// Unique ID
	private id: number

	// Sequence number for mapping UDP requests to responses
	private sequence: number
	private request: { [sequence: number]: Packet<any> }

	// Network interface and socket
	private network: Array<LifxNetworkInterface>
	private udp: dgram.Socket
	private port: number
	private alive: boolean
	private monitoring?: NodeJS.Timer

	// Devices and mapping
	private devices: Array<LifxDevice>
	private device: { [ip: string]: LifxDevice }

	// Event handler
	private handler: { [event: string]: Array<LifxDeviceHandler> }

	/**
	 * @constructor
	 */
	constructor() {
		// Unique client ID
		this.id = Math.floor(Math.random() * 0xffffffff)

		// Sequenced request cache
		this.request = {}
		this.sequence = 0

		// Devices and associated callback function map
		this.devices = []
		this.device = {}
		this.handler = {}

		// Initialize network interfaces from OS
		this.network = getIPv4Interfaces()
		this.alive = false
	}

	/**
	 * @func 	start
	 * @desc 	Starts the client by initializing the UDP socket and binding incoming
	 * 			socket messages to this client instance.
	 */
	async start(port?: number): Promise<LifxClient> {
		if (this.udp && this.alive)
			return this

		// If the socket is successfully created, set the "alive" flag to true
		this.port = port || LIFX_PORT
		this.udp = await createSocket(this.port, this.receivePacket.bind(this))
		this.alive = true

		// Listen to shutdown signals and close the socket
		process.on('SIGTERM', () => this.stop())
        process.on('SIGINT', () => this.stop())

		return this
	}

	async stop(): Promise<any> {
		if (! this.udp)
			return
		this.stopMonitoring()
		await Promise.all(this.devices.map((device) => device.stop()))

		if (this.udp && ! this.alive) {
			this.udp.unref()
			return
		}

		return new Promise((resolve: (c: LifxClient) => any) => {
			try {
				this.udp.close(() => {
					this.udp.unref()
					this.alive = false
					resolve(this)
				})
			}
			catch (error) {
				this.alive = false
				resolve(this)
			}
		})
	}

	/**
	 * @func 	receivePacket
	 * @desc 	Internal handler for parsing incoming UDP packets and passing the
	 * 			response payload to the original request packet.
	 */
	private receivePacket(buffer: Buffer, info: dgram.RemoteInfo) {
		// Ignore packets generated by a network interface associated with this client
		if (this.network.find((networkInfo) => (networkInfo.address == info.address)))
			return

		// Parse the response and search for an associated cached request packet
		const response = new Response(buffer, info)
		const request = this.getPacket(response)
		if (request)
			request.emitResponse(response)
	}

	/**
	 * @func 	discover
	 * @desc 	Broadcast a discovery packet and initialize a connection to
	 * 			devices that respond.
	 */
	async discover() {
		await this.start()
		const discovery = new DeviceDiscover()

		// Create new LifxDevice instances from each unique IP that responds to the
		// discovery packet
		discovery.onResponse((response, payload) => {
			if (! this.hasDevice(response))
				this.addDevice(new LifxDevice(this, response.ip, response.mac, payload.port))
		})

		// Broadcast the discover packet on all available network interfaces
		await Promise.all(this.network.map((network) =>
			this.broadcast(discovery, network)))

		return this
	}

	hasDevice(response: Response | string) {
		return this.device[(response instanceof Response) ? response.mac : response] != null
	}

	getDevices() {
		return this.devices
	}

	getGroups(): Array<DeviceGroup> {
		return this.devices.map((device) => device.group)
			.filter((group) => group != null) as Array<DeviceGroup>
	}

	getLocations(): Array<DeviceGroup> {
		return this.devices.map((device) => device.location)
			.filter((group) => group != null) as Array<DeviceGroup>
	}

	getGroup(ref: DeviceGroup | string) {
		return this.devices.filter((device) => device.inGroup(ref))
	}

	getLocation(ref: DeviceGroup | string) {
		return this.devices.filter((device) => device.inLocation(ref))
	}

	addDevice(device: LifxDevice): LifxDevice {
		this.devices.push(device)
		this.device[device.getMacAddress()] = device
		this.emit('connect', device)
		return device
	}

	removeDevice(device: LifxDevice): LifxDevice | null {
		const index = this.devices.findIndex((d) => (d == device))
		if (index >= 0) {
			this.devices.splice(index, 1)
			delete this.device[device.getMacAddress()]
			this.emit('disconnect', device)
			device.stop()
			return device
		}
		return null
	}

	monitor(interval: number) {
		this.stopMonitoring()
		this.monitoring = setInterval(async () => {
			await this.ping(interval)
			await this.discover()
		}, interval)
	}

	stopMonitoring() {
		if (this.monitoring)
			clearInterval(this.monitoring)
	}

	async ping(timeout?: number) {
		if (! this.alive)
			return

		const pongs = await Promise.all(this.devices.map((device) => device.ping(timeout)))

		for (let i = 0 ; i < pongs.length ; i++) {
			if (! pongs[i]) {
				pongs.splice(i, 1)
				const device = this.devices.splice(i, 1)[0]
				delete this.device[device.getMacAddress()]
				this.emit('disconnect', device)
				i--
			}
		}
	}

	on(event: Array<string> | string, handler: LifxDeviceHandler) {
		if (Array.isArray(event)) {
			event.forEach((e) => this.on(e, handler))
			return this
		}

		if (! this.handler[event])
			this.handler[event] = []
		this.handler[event].push(handler)
		return this
	}

	emit(event: string, device: LifxDevice) {
		if (this.handler[event])
			this.handler[event].forEach((handler) => {
				try {
					handler(device)
				}
				catch (e) { }
			})
	}

	async onConnect(handler: LifxDeviceHandler) {
		return this.on('connect', handler)
	}

	async onLoad(handler: LifxDeviceHandler) {
		return this.on('load', handler)
	}

	async onChange(handler: LifxDeviceHandler) {
		return this.on('change', handler)
	}

	async onDisconnect(handler: LifxDeviceHandler) {
		return this.on('disconnect', handler)
	}

	async send<R>(packet: Packet<R>, device: LifxDevice): Promise<Transmission> {
		if (! this.alive)
			await this.start()

		// Create a Transmission object and unicast to the device without processing
		// any response that is sent back from the device
		const transmission = this.build(packet, device, true)
		await this.unicast(transmission, device)
		return transmission
	}

	async get<Result>(packet: Packet<Result>, device: LifxDevice, timeout?: number): Promise<Result> {
		if (! this.alive)
			await this.start()

		return new Promise(async (resolve: (payload: Result) => any, reject) => {
			const transmission = this.build(packet, device)

			const deviceTimeout = setTimeout(() => {
				this.clearPacket(packet, transmission)
				reject(DeviceTimeoutError)
			}, timeout || DEFAULT_TIMEOUT)

			packet.onResponse((response, payload) => {
				clearTimeout(deviceTimeout)

				if (device.didRespond(response)) {
					this.clearPacket(packet, response)
					resolve(payload)
				}
				else reject(DeviceRequestError)
			})

			await this.unicast(transmission, device)
		})

	}

	//
	// UDP SOCKET COMMUNICATION
	//
	//

	/**
	 * @func 	broadcast
	 * @desc
	 */
	private async broadcast<R>(packet: Packet<R>, network: LifxNetworkInterface) {
		const transmission = this.build(packet)
		return broadcast(this.udp, transmission.buffer, network.broadcast)
	}

	private async unicast(transmission: Transmission, device: LifxDevice) {
		return unicast(this.udp, transmission.buffer, device.getIP(), device.getPort())
	}

	//
	// PACKET CACHING
	//

	build(packet: Packet<any>, device?: LifxDevice, ignoreResponse?: boolean): Transmission {
		const transmission = packet.build(this, device)
		if (! ignoreResponse && packet.expectsResponse())
			this.cachePacket(packet, transmission)
		return transmission
	}

	private getPacket(transmission: Transmission | Response) {
		return this.request[transmission.sequence]
	}

	private cachePacket(packet: Packet<any>, transmission: Transmission) {
		this.request[transmission.sequence] = packet
		return this
	}

	private clearPacket(packet: Packet<any>, p: Response | Transmission): LifxClient {
		if (this.request[p.sequence] == packet)
			delete this.request[p.sequence]
		return this
	}



	/**
	 * Replies from a device will copy the triplet of (source, sequence, target)
	 * from the request packet. The `sequence` UInt8 is used to determine which request
	 * resulted in which reply. Sequence increments for each message sent, and then wraps
	 * to 0 after it reaches 255.
	 */
	nextSequence(): number {
		return this.sequence = (this.sequence + 1) % 255
	}

	getId() {
		return this.id
	}

	isRunning() {
		return this.alive
	}

}
